package com.amdocs.digital.ms.coe.dashboard.testpact.pactconsumer;

import java.lang.reflect.InvocationTargetException;

import javax.inject.Inject;

import org.junit.BeforeClass;
import org.junit.Rule;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.boot.autoconfigure.ImportAutoConfiguration;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.TestPropertySource;
import org.springframework.test.context.junit4.SpringRunner;


import au.com.dius.pact.consumer.Pact;
import au.com.dius.pact.consumer.PactProviderRuleMk2;
import au.com.dius.pact.consumer.PactVerification;
import au.com.dius.pact.consumer.dsl.PactDslWithProvider;
import au.com.dius.pact.model.RequestResponsePact;


@RunWith(SpringRunner.class)
// Instruction
// Uncomment the following when Provider2's client is generated by swagger.
//@@ImportAutoConfiguration(classes={Feign.Builder.class, ProductOrderApiConfig.class, com.amdocs.msbase.resource.lock.config.MsbResourceOptimisticLocksMappingConfig.class})

// Instruction
// 1. Look inside Provider2ApiConfig.java for the correct spelling of "services.provider2.url" 
@TestPropertySource(properties = "services.provider2.url=http://127.0.0.1:8899/provider2-management")
public class ThisServiceProvider2PactGenTest extends PactFileMerger 
{
	public static final String CONSUMER = "Dashboard";
	public static final String PROVIDER = "Provider2";
	
    @Rule
    public PactProviderRuleMk2 rule = new PactProviderRuleMk2(PROVIDER, "127.0.0.1", 8899, this);
    
// Instruction:
// Once the Provider1's client is generated by swagger, uncomment this line
//    @Inject
//    Provider1Api client;
	
	@BeforeClass
	public static void init() throws InstantiationException, IllegalAccessException
	{
		PACKAGE_OF_PACTS_TO_MERGE = "com.amdocs.digital.ms.coe.dashboard.testpact.doNotPublish";
		PactFileMerger.init();
	}
    
    @Pact(provider=PROVIDER, consumer=CONSUMER)
    public RequestResponsePact RequestResponsePact(PactDslWithProvider builder) throws NoSuchMethodException, SecurityException, IllegalAccessException, IllegalArgumentException, InvocationTargetException
    {
    	return super.createFragment(builder);
     }

 	@Test
    @PactVerification( PROVIDER)
    @SuppressWarnings("squid:S2699")
    public void runTest( ) throws IllegalAccessException, IllegalArgumentException, InvocationTargetException, NoSuchMethodException, SecurityException {
 		super.runTest();
 	}
}
